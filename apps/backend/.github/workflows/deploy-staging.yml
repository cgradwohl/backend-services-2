name: Deploy Courier Staging

on:
  push:
    branches:
      - main
    tags-ignore:
      - "*.*"

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          cache: yarn
          node-version: ${{ matrix.node-version }}
      - name: Install Dependencies
        run: yarn install
      - name: Test
        run: yarn test
        env:
          CI: true
      - uses: codecov/codecov-action@v2
        with:
          token: 95b9dc34-ccdb-4687-be50-a5fe2d3d699c # not required for public repos
          files: ./coverage/coverage-final.json # optional
          flags: unittests # optional
          name: codecov-umbrella # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)

  deploy-auditing:
    runs-on: ubuntu-latest
    needs:
      - test
    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          cache: yarn
          node-version: ${{ matrix.node-version }}
      - name: Install Dependencies
        run: yarn install
      - name: Deploy auditing service
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          COURIER_AUTH_TOKEN: ${{ secrets.STAGING_COURIER_AUTH_TOKEN }}
          LAUNCHDARKLY_SDK_KEY: ${{ secrets.STAGING_LAUNCHDARKLY_SDK_KEY }}
          NODE_ENV: production
          SENTRY_ENV: staging
          STAGE: staging
        run: yarn serverless:deploy:auditing --stage $STAGE

  deploy-audiences:
    runs-on: ubuntu-latest
    needs:
      - test
      - deploy-shared

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          cache: yarn
          node-version: ${{ matrix.node-version }}
      - name: Install Dependencies
        run: yarn install
      - name: Deploy audiences service
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          NODE_ENV: production
          SENTRY_ENV: staging
          STAGE: staging
        run: yarn serverless:deploy:audiences --stage $STAGE

  deploy-shared:
    runs-on: ubuntu-latest
    needs: test

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          cache: yarn
          node-version: ${{ matrix.node-version }}
      - name: Install Dependencies
        run: yarn install
      - name: Deploy Staging
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          CLICK_THROUGH_TRACKING_DOMAIN_NAME: ${{ secrets.STAGING_CLICK_THROUGH_TRACKING_DOMAIN_NAME }}
          CLICK_THROUGH_TRACKING_HOSTED_ZONE: ${{ secrets.STAGING_CLICK_THROUGH_TRACKING_HOSTED_ZONE }}
          COURIER_AUTH_TOKEN: ${{ secrets.STAGING_COURIER_AUTH_TOKEN }}
          COURIER_EMAIL_CONFIG_ID: ${{ secrets.STAGING_COURIER_EMAIL_CONFIG_ID }}
          COURIER_SENDGRID_API_KEY: ${{ secrets.COURIER_SENDGRID_API_KEY }}
          COURIER_TENANT_ID: ${{ secrets.STAGING_COURIER_TENANT_ID }}
          CRYPTO_PRIVATE_KEY_256: ${{ secrets.STAGING_CRYPTO_PRIVATE_KEY_256 }}
          DD_API_KEY: ${{ secrets.STAGING_DD_API_KEY }}
          DD_EXTERNAL_ID: ${{ secrets.DD_EXTERNAL_ID }}
          GOOGLE_SEND_PROVIDER_CLIENT_ID: ${{ secrets.STAGING_GOOGLE_SEND_PROVIDER_CLIENT_ID }}
          GOOGLE_SEND_PROVIDER_CLIENT_SECRET: ${{ secrets.STAGING_GOOGLE_SEND_PROVIDER_CLIENT_SECRET }}
          GOOGLE_SEND_REDIRECT_URL: ${{ secrets.STAGING_GOOGLE_SEND_REDIRECT_URL }}
          HOSTED_ZONE_ID: ${{ secrets.STAGING_HOSTED_ZONE_ID }}
          INTERCOM_IDENTITY_VERIFICATION_SECRET: ${{ secrets.STAGING_INTERCOM_IDENTITY_VERIFICATION_SECRET }}
          IN_APP_API_URL: ${{ secrets.STAGING_IN_APP_API_URL }}
          KICKBOX_API_KEY: ${{ secrets.STAGING_KICKBOX_API_KEY }}
          LAUNCHDARKLY_SDK_KEY: ${{ secrets.STAGING_LAUNCHDARKLY_SDK_KEY }}
          NODE_ENV: production
          SEGMENT_WRITE_KEY: ${{ secrets.STAGING_SEGMENT_WRITE_KEY }}
          SENTRY_ENV: staging
          SSO_COMMUNITY_SECRET: ${{ secrets.SSO_COMMUNITY_SECRET }}
          SSO_DOCUMENTATION_SECRET: ${{ secrets.SSO_DOCUMENTATION_SECRET }}
          SSO_GOOGLE_CLIENT_ID: ${{ secrets.STAGING_SSO_GOOGLE_CLIENT_ID }}
          SSO_GOOGLE_CLIENT_SECRET: ${{ secrets.STAGING_SSO_GOOGLE_CLIENT_SECRET }}
          STAGE: staging
          STRIPE_SECRET_KEY: ${{ secrets.STAGING_STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STAGING_STRIPE_WEBHOOK_SECRET }}
          VERCEL_CLIENT_SECRET: ${{ secrets.VERCEL_CLIENT_SECRET }}
          WORKOS_WEBHOOK_SECRET: ${{ secrets.WORKOS_WEBHOOK_SECRET }}
        run: yarn serverless:deploy --stage $STAGE
      - name: Sentry
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ENV: production
        run: yarn sentry:release

  deploy-drain:
    runs-on: ubuntu-latest
    needs:
      - test
      - deploy-shared
    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          cache: yarn
          node-version: ${{ matrix.node-version }}
      - name: Install Dependencies
        run: yarn install
      - name: Deploy drain service
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          DD_API_KEY: ${{ secrets.STAGING_DD_API_KEY }}
          NODE_ENV: production
          SENTRY_ENV: staging
          STAGE: staging
        run: yarn serverless:deploy:drain --stage $STAGE

  deploy-bulk:
    runs-on: ubuntu-latest
    needs:
      - test
    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          cache: yarn
          node-version: ${{ matrix.node-version }}
      - name: Install Dependencies
        run: yarn install
      - name: Deploy bulk service
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          NODE_ENV: production
          SENTRY_ENV: staging
          STAGE: staging
        run: yarn serverless:deploy:bulk --stage $STAGE

  deploy-global-request-router:
    runs-on: ubuntu-latest
    needs:
      - test
    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          cache: yarn
          node-version: ${{ matrix.node-version }}
      - name: Install Dependencies
        run: yarn install
      - name: Deploy Global Request Router
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          HOSTED_ZONE_ID: ${{ secrets.STAGING_HOSTED_ZONE_ID }}
          NODE_ENV: production
          SENTRY_ENV: staging
          STAGE: staging
        run: yarn serverless:deploy:global-request-router --stage $STAGE

  deploy-global-ddb:
    runs-on: ubuntu-latest
    needs:
      - test
    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          cache: yarn
          node-version: ${{ matrix.node-version }}
      - name: Install Dependencies
        run: yarn install
      - name: Deploy Global DynamoDB tables
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          HOSTED_ZONE_ID: ${{ secrets.STAGING_HOSTED_ZONE_ID }}
          NODE_ENV: production
          SENTRY_ENV: staging
          STAGE: staging
        run: yarn serverless:deploy:global-ddb --stage $STAGE

  smoke-tests:
    runs-on: ubuntu-latest
    needs:
      - test
      - deploy-shared

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          cache: yarn
          node-version: ${{ matrix.node-version }}
      - name: Install Dependencies
        run: yarn install
      - name: Smoke Test
        env:
          API_URL: https://yubmnstah4.execute-api.us-east-1.amazonaws.com/staging
          COURIER_AUTH_TOKEN: ${{ secrets.STAGING_COURIER_AUTH_TOKEN }}
          COURIER_CLIENT_KEY: YWZiZWViNGItMjAyMS00MzgwLTlkZDUtZWI0Y2MzNzEwNmMw
          STAGE: staging
        run: yarn test:smoke
      - name: Notify Failure
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: engineering
          status: FAILED
          color: danger
