import getIdPatterns from "~/lib/get-id-patterns";

describe("when getting ID patterns", () => {
  const testCases: ReadonlyArray<[string, string[]]> = [
    ["employees", []],
    ["employees.sf", ["*.sf", "employees.*", "employees.**"]],
    [
      "employees.sf.engineering",
      [
        "employees.sf.*",
        "employees.*.engineering",
        "employees.*.*",
        "*.sf.engineering",
        "*.sf.*",
        "*.*.engineering",
        "employees.**",
        "employees.sf.**",
      ],
    ],
    [
      "employees.sf.engineering.backend",
      [
        "*.*.*.backend",
        "*.*.engineering.*",
        "*.*.engineering.backend",
        "*.sf.*.*",
        "*.sf.*.backend",
        "*.sf.engineering.*",
        "*.sf.engineering.backend",
        "employees.*.*.*",
        "employees.*.*.backend",
        "employees.*.engineering.*",
        "employees.*.engineering.backend",
        "employees.sf.*.*",
        "employees.sf.*.backend",
        "employees.sf.engineering.*",
        "employees.**",
        "employees.sf.**",
        "employees.sf.engineering.**",
      ],
    ],
    [
      "employees.sf.engineering.backend.tests",
      [
        "*.*.*.*.tests",
        "*.*.*.backend.*",
        "*.*.*.backend.tests",
        "*.*.engineering.*.*",
        "*.*.engineering.*.tests",
        "*.*.engineering.backend.*",
        "*.*.engineering.backend.tests",
        "*.sf.*.*.*",
        "*.sf.*.*.tests",
        "*.sf.*.backend.*",
        "*.sf.*.backend.tests",
        "*.sf.engineering.*.*",
        "*.sf.engineering.*.tests",
        "*.sf.engineering.backend.*",
        "*.sf.engineering.backend.tests",
        "employees.*.*.*.*",
        "employees.*.*.*.tests",
        "employees.*.*.backend.*",
        "employees.*.*.backend.tests",
        "employees.*.engineering.*.*",
        "employees.*.engineering.*.tests",
        "employees.*.engineering.backend.*",
        "employees.*.engineering.backend.tests",
        "employees.sf.*.*.*",
        "employees.sf.*.*.tests",
        "employees.sf.*.backend.*",
        "employees.sf.*.backend.tests",
        "employees.sf.engineering.*.*",
        "employees.sf.engineering.*.tests",
        "employees.sf.engineering.backend.*",
        "employees.**",
        "employees.sf.**",
        "employees.sf.engineering.**",
        "employees.sf.engineering.backend.**",
      ],
    ],
    [
      "employees.sf.engineering.backend.tests.jest",
      [
        "*.*.*.*.*.jest",
        "*.*.*.*.tests.*",
        "*.*.*.*.tests.jest",
        "*.*.*.backend.*.*",
        "*.*.*.backend.*.jest",
        "*.*.*.backend.tests.*",
        "*.*.*.backend.tests.jest",
        "*.*.engineering.*.*.*",
        "*.*.engineering.*.*.jest",
        "*.*.engineering.*.tests.*",
        "*.*.engineering.*.tests.jest",
        "*.*.engineering.backend.*.*",
        "*.*.engineering.backend.*.jest",
        "*.*.engineering.backend.tests.*",
        "*.*.engineering.backend.tests.jest",
        "*.sf.*.*.*.*",
        "*.sf.*.*.*.jest",
        "*.sf.*.*.tests.*",
        "*.sf.*.*.tests.jest",
        "*.sf.*.backend.*.*",
        "*.sf.*.backend.*.jest",
        "*.sf.*.backend.tests.*",
        "*.sf.*.backend.tests.jest",
        "*.sf.engineering.*.*.*",
        "*.sf.engineering.*.*.jest",
        "*.sf.engineering.*.tests.*",
        "*.sf.engineering.*.tests.jest",
        "*.sf.engineering.backend.*.*",
        "*.sf.engineering.backend.*.jest",
        "*.sf.engineering.backend.tests.*",
        "*.sf.engineering.backend.tests.jest",
        "employees.**",
        "employees.*.*.*.*.*",
        "employees.*.*.*.*.jest",
        "employees.*.*.*.tests.*",
        "employees.*.*.*.tests.jest",
        "employees.*.*.backend.*.*",
        "employees.*.*.backend.*.jest",
        "employees.*.*.backend.tests.*",
        "employees.*.*.backend.tests.jest",
        "employees.*.engineering.*.*.*",
        "employees.*.engineering.*.*.jest",
        "employees.*.engineering.*.tests.*",
        "employees.*.engineering.*.tests.jest",
        "employees.*.engineering.backend.*.*",
        "employees.*.engineering.backend.*.jest",
        "employees.*.engineering.backend.tests.*",
        "employees.*.engineering.backend.tests.jest",
        "employees.sf.**",
        "employees.sf.*.*.*.*",
        "employees.sf.*.*.*.jest",
        "employees.sf.*.*.tests.*",
        "employees.sf.*.*.tests.jest",
        "employees.sf.*.backend.*.*",
        "employees.sf.*.backend.*.jest",
        "employees.sf.*.backend.tests.*",
        "employees.sf.*.backend.tests.jest",
        "employees.sf.engineering.**",
        "employees.sf.engineering.*.*.*",
        "employees.sf.engineering.*.*.jest",
        "employees.sf.engineering.*.tests.*",
        "employees.sf.engineering.*.tests.jest",
        "employees.sf.engineering.backend.**",
        "employees.sf.engineering.backend.*.*",
        "employees.sf.engineering.backend.*.jest",
        "employees.sf.engineering.backend.tests.*",
        "employees.sf.engineering.backend.tests.**",
      ],
    ],
  ];

  for (const [testCase, expected] of testCases) {
    it(`will return the expected patterns if Topic ID is ${testCase}`, () =>
      expect(getIdPatterns(testCase)).toMatchObject(expected.sort()));
  }
});
