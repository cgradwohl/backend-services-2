import expandWildcardAction from "~/lib/access-control/expand-wildcard-action";
import { WildcardAction } from "~/lib/access-control/types";

it("should expand a root wildcard", () => {
  expect(expandWildcardAction("*")).toStrictEqual([
    "analytics:View",
    "apikey:ReadItem",
    "apikey:RotateKey",
    "apikey:WriteItem",
    "apikey:ListItems",
    "auditTrail:ListItems",
    "automationLogs:ListItems",
    "automationLogs:ReadItem",
    "automationLogs:WriteItem",
    "automationTemplate:ListItems",
    "automationTemplate:ReadItem",
    "automationTemplate:WriteItem",
    "billing:UpdatePaymentMethod",
    "billing:UpdatePlan",
    "billing:ViewBilling",
    "brand:ListItems",
    "brand:ReadItem",
    "brand:WriteItem",
    "category:ListItems",
    "category:ReadItem",
    "category:WriteItem",
    "integration:ListItems",
    "integration:ReadItem",
    "integration:WriteItem",
    "list:ListItems",
    "list:ReadItem",
    "list:WriteItem",
    "message:ListItems",
    "message:ReadEventDetails",
    "message:ReadItem",
    "message:RequeueItem",
    "message:WriteItem",
    "metrics:GetMetrics",
    "preferenceTemplate:ListItems",
    "preferenceTemplate:ReadItem",
    "preferenceTemplate:WriteItem",
    "recipient:ListItems",
    "recipient:ReadItem",
    "recipient:WriteItem",
    "security:WriteSettings",
    "template:ListItems",
    "template:ReadItem",
    "template:WriteItem",
    "tenant:ListItems",
    "tenant:ReadItem",
    "tenant:WriteItem",
    "tracking:WriteSettings",
    "user:InviteUser",
    "user:ListItems",
    "user:ReadItem",
    "user:WriteItem",
    "webhook:ListItems",
    "webhook:ReadItem",
    "webhook:WriteItem",
  ]);
});

it("should return an empty array when pattern not found", () => {
  expect(expandWildcardAction("foo" as WildcardAction)).toStrictEqual([]);
});
